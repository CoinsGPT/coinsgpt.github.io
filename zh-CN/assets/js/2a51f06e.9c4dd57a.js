"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["92802"],{57234:function(n,t,e){e.d(t,{Z:()=>i});let i=e.p+"assets/images/bitcoin_data_pipeline-083bc34cccd93411924337896b88770f.png"},4023:function(n,t,e){e.r(t),e.d(t,{frontMatter:()=>d,default:()=>o,contentTitle:()=>l,assets:()=>c,toc:()=>a,metadata:()=>i});var i=JSON.parse('{"id":"bitcoin/clickhouse-schema","title":"04 ClickHouse Schema","description":"\\"Create Fat First, Then Make Tight\\" Strategy","source":"@site/docs/bitcoin/clickhouse-schema.md","sourceDirName":"bitcoin","slug":"/bitcoin/clickhouse-schema","permalink":"/zh-CN/docs/next/bitcoin/clickhouse-schema","draft":false,"unlisted":false,"editUrl":"https://crowdin.com/project/docusaurus-v2/zh-CN","tags":[],"version":"current","lastUpdatedBy":"thebestornothing","lastUpdatedAt":1749536656000,"frontMatter":{},"sidebar":"bitcoin","previous":{"title":"04 ClickHouse Setup","permalink":"/zh-CN/docs/next/bitcoin/clickhouse-setup"},"next":{"title":"05 ClickHouse Schema Evolution","permalink":"/zh-CN/docs/next/bitcoin/clickhouse-schema-evolution"}}'),s=e(85893),r=e(80980);let d={},l="04 ClickHouse Schema",c={},a=[{value:"Fat \u279D Tight in Practice",id:"fat--tight-in-practice",level:2},{value:"Enhance &quot;fat \u279D tight&quot; model",id:"enhance-fat--tight-model",level:2},{value:"Block Design",id:"block-design",level:2},{value:"Transaction Design",id:"transaction-design",level:2},{value:"JSON type",id:"json-type",level:2},{value:"blocks.json",id:"blocksjson",level:3},{value:"transactions.json",id:"transactionsjson",level:3},{value:"transaction_input",id:"transaction_input",level:3},{value:"transaction_output",id:"transaction_output",level:3}];function h(n){let t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"04-clickhouse-schema",children:"04 ClickHouse Schema"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:e(57234).Z+"",width:"1536",height:"1024"})}),"\n",(0,s.jsx)(t.p,{children:'"Create Fat First, Then Make Tight" Strategy'}),"\n",(0,s.jsxs)(t.p,{children:["This design pattern\u2014",(0,s.jsx)(t.strong,{children:'"create fat, then make tight"'}),"\u2014is a ",(0,s.jsx)(t.strong,{children:"staging + optimization approach"})," for database schema design and data modeling. It's useful when:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"You're importing raw, nested, or complex data (e.g. from JSON, APIs, blockchain)"}),"\n",(0,s.jsx)(t.li,{children:"You want fast ingestion first, and optimized queries later"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"fat--tight-in-practice",children:"Fat \u279D Tight in Practice"}),"\n",(0,s.jsxs)(t.p,{children:["Step 1: ",(0,s.jsx)(t.strong,{children:"Create Fat Table (Staging Table)"})]}),"\n",(0,s.jsxs)(t.p,{children:["Start by creating a ",(0,s.jsx)(t.strong,{children:"fat schema"})," that mirrors your input data structure with nested arrays or wide fields."]}),"\n",(0,s.jsx)(t.p,{children:"Example (ClickHouse \u2013 Bitcoin Transactions):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE transactions_fat (\n  txid String,\n  block_hash String,\n  inputs Array(Tuple(\n    index UInt64,\n    prev_txid String,\n    prev_vout UInt64,\n    script_sig String,\n    sequence UInt64,\n    value Float64,\n    addresses Array(String)\n  )),\n  outputs Array(Tuple(\n    index UInt64,\n    script_pubkey String,\n    value Float64,\n    addresses Array(String)\n  )),\n  block_time DateTime\n) ENGINE = MergeTree()\nORDER BY (block_time);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Step 2: ",(0,s.jsx)(t.strong,{children:"Extract & Normalize into Tight Tables"})]}),"\n",(0,s.jsxs)(t.p,{children:["After the data is loaded, ",(0,s.jsx)(t.strong,{children:"flatten and normalize"}),' into "tight" tables:']}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Store one row per input/output/transaction"}),"\n",(0,s.jsx)(t.li,{children:"Extract key fields"}),"\n",(0,s.jsx)(t.li,{children:"Optimize for analytic queries"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Example: Inputs Table"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE tx_inputs (\n  txid String,\n  index UInt64,\n  prev_txid String,\n  prev_vout UInt64,\n  script_sig String,\n  sequence UInt64,\n  value Float64,\n  address String,\n  block_time DateTime\n) ENGINE = MergeTree()\nORDER BY (block_time);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Transform from fat \u279D tight"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"INSERT INTO tx_inputs\nSELECT\n  txid,\n  i.index,\n  i.prev_txid,\n  i.prev_vout,\n  i.script_sig,\n  i.sequence,\n  i.value,\n  addr AS address,\n  block_time\nFROM transactions_fat\nARRAY JOIN inputs AS i\nARRAY JOIN i.addresses AS addr;\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"This flattens nested arrays and creates a fast, queryable structure."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Why This Pattern Works"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Step"}),(0,s.jsx)(t.th,{children:"Goal"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Fat table"})}),(0,s.jsx)(t.td,{children:"Fast bulk insert, raw data integrity"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Tight table"})}),(0,s.jsx)(t.td,{children:"Optimized query performance, indexed structure"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Split later"})}),(0,s.jsx)(t.td,{children:"Post-ingestion transformation lets you adapt based on real usage"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Optional Enhancements"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.strong,{children:"materialized views"})," to automate tight-table generation"]}),"\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.strong,{children:"Kafka + ClickHouse"})," with JSON ingestion for real-time fat \u279D tight"]}),"\n",(0,s.jsxs)(t.li,{children:["Add ",(0,s.jsx)(t.strong,{children:"partitions"})," by block height or time in tight tables"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"enhance-fat--tight-model",children:'Enhance "fat \u279D tight" model'}),"\n",(0,s.jsxs)(t.p,{children:['Let\u2019s enhance the "fat \u279D tight" model using ',(0,s.jsx)(t.strong,{children:"Materialized Views in ClickHouse"}),", so that ",(0,s.jsx)(t.strong,{children:"flattened \u201Ctight\u201D tables are auto-populated"})," from the fat raw data."]}),"\n",(0,s.jsxs)(t.p,{children:["We have a ",(0,s.jsx)(t.strong,{children:"fat table"})," storing Bitcoin transactions with nested arrays for inputs/outputs."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Fast ingestion"})," into the fat table (from JSON, Kafka, etc.)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Auto-generated tight tables"})," (e.g., ",(0,s.jsx)(t.code,{children:"tx_inputs"}),") for querying, updated in real-time"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Step-by-Step: Fat \u279D Tight via Materialized View"}),"\n",(0,s.jsx)(t.p,{children:"step 1. Fat Table (Staging)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE transactions_fat (\n  txid String,\n  block_hash String,\n  inputs Array(Tuple(\n    index UInt64,\n    prev_txid String,\n    prev_vout UInt64,\n    script_sig String,\n    sequence UInt64,\n    value Float64,\n    addresses Array(String)\n  )),\n  outputs Array(Tuple(\n    index UInt64,\n    script_pubkey String,\n    value Float64,\n    addresses Array(String)\n  )),\n  block_time DateTime\n) ENGINE = MergeTree()\nORDER BY (block_time);\n"})}),"\n",(0,s.jsx)(t.p,{children:"setp 2. Tight Table for Inputs"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE tx_inputs (\n  txid String,\n  index UInt64,\n  prev_txid String,\n  prev_vout UInt64,\n  script_sig String,\n  sequence UInt64,\n  value Float64,\n  address String,\n  block_time DateTime\n) ENGINE = MergeTree()\nORDER BY (block_time);\n"})}),"\n",(0,s.jsx)(t.p,{children:"setp 3. Materialized View (Fat \u279D Inputs)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_tx_inputs\nTO tx_inputs AS\nSELECT\n  txid,\n  i.index,\n  i.prev_txid,\n  i.prev_vout,\n  i.script_sig,\n  i.sequence,\n  i.value,\n  addr AS address,\n  block_time\nFROM transactions_fat\nARRAY JOIN inputs AS i\nARRAY JOIN i.addresses AS addr;\n"})}),"\n",(0,s.jsx)(t.p,{children:"How It Works"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Every ",(0,s.jsx)(t.code,{children:"INSERT"})," into ",(0,s.jsx)(t.code,{children:"transactions_fat"})," ",(0,s.jsx)(t.strong,{children:"automatically triggers"})," ",(0,s.jsx)(t.code,{children:"mv_tx_inputs"})]}),"\n",(0,s.jsxs)(t.li,{children:["The view flattens nested inputs and inserts rows into ",(0,s.jsx)(t.code,{children:"tx_inputs"})]}),"\n",(0,s.jsx)(t.li,{children:"No need for separate transformation queries or batch jobs"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"block-design",children:"Block Design"}),"\n",(0,s.jsxs)(t.p,{children:["To ETL the raw data of block from (Bitcoin Core)[",(0,s.jsx)(t.a,{href:"https://bitcoincore.org/en/doc/29.0.0/rpc/blockchain/getblock/",children:"https://bitcoincore.org/en/doc/29.0.0/rpc/blockchain/getblock/"}),"] as blocks_fat."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE blocks_fat\n(\n  hash String,\n  size UInt64,\n  stripped_size UInt64,\n  weight UInt64,\n  number UInt64,\n  version UInt64,\n  merkle_root String,\n  timestamp DateTime,\n  timestamp_month Date,\n  nonce String,\n  bits String,\n  coinbase_param String,\n  previous_block_hash String,\n  difficulty Float64,\n  transaction_count UInt64,\n  transactions Array(String)\n)\nENGINE = ReplacingMergeTree()\nPRIMARY KEY (hash)\nPARTITION BY toYYYYMM(timestamp_month)\nORDER BY hash;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To create a ",(0,s.jsxs)(t.strong,{children:["tight ",(0,s.jsx)(t.code,{children:"blocks"})," table"]})," without the ",(0,s.jsx)(t.code,{children:"transactions"})," array from your ",(0,s.jsx)(t.code,{children:"blocks_fat"})," table using a ",(0,s.jsx)(t.strong,{children:"Materialized View"}),", follow this plan:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Excluding the ",(0,s.jsx)(t.code,{children:"transactions"})," array"]}),"\n",(0,s.jsx)(t.li,{children:"Keeping all other atomic block attributes"}),"\n",(0,s.jsx)(t.li,{children:"Auto-populating the tight table on insert"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE blocks\n(\n  hash String,\n  size UInt64,\n  stripped_size UInt64,\n  weight UInt64,\n  number UInt64,\n  version UInt64,\n  merkle_root String,\n  timestamp DateTime,\n  timestamp_month Date,\n  nonce String,\n  bits String,\n  coinbase_param String,\n  previous_block_hash String,\n  difficulty Float64,\n  transaction_count UInt64\n)\nENGINE = MergeTree()\nPARTITION BY toYYYYMM(timestamp_month)\nORDER BY hash;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Create the Materialized View from ",(0,s.jsx)(t.code,{children:"blocks_fat"})," \u279D ",(0,s.jsx)(t.code,{children:"blocks"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_blocks_tight\nTO blocks AS\nSELECT\n  hash,\n  size,\n  stripped_size,\n  weight,\n  number,\n  version,\n  merkle_root,\n  timestamp,\n  timestamp_month,\n  nonce,\n  bits,\n  coinbase_param,\n  previous_block_hash,\n  difficulty,\n  nTx\nFROM blocks_fat;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Summary::w"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Component"}),(0,s.jsx)(t.th,{children:"Purpose"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"blocks_fat"})}),(0,s.jsx)(t.td,{children:"Full raw block data (with txs)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"blocks"})}),(0,s.jsx)(t.td,{children:"Optimized analytic structure"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mv_blocks_tight"})}),(0,s.jsx)(t.td,{children:"Materialized View (fat \u279D tight)"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"transaction-design",children:"Transaction Design"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE transactions\n(\n  hash String,\n  size UInt64,\n  virtual_size UInt64,\n  version UInt64,\n  lock_time UInt64,\n  block_hash String,\n  block_number UInt64,\n  block_timestamp DateTime,\n  block_timestamp_month Date,\n  input_count UInt64,\n  output_count UInt64,\n  input_value Float64,\n  output_value Float64,\n  is_coinbase BOOL,\n  fee Float64,\n  inputs Array(Tuple(index UInt64, spent_transaction_hash String, spent_output_index UInt64, script_asm String, script_hex String, sequence UInt64, required_signatures UInt64, type String, addresses Array(String), value Float64)),\n  outputs Array(Tuple(index UInt64, script_asm String, script_hex String, required_signatures UInt64, type String, addresses Array(String), value Float64))\n)\nENGINE = ReplacingMergeTree()\nPRIMARY KEY (block_hash, hash)\nPARTITION BY toYYYYMM(block_timestamp_month)\nORDER BY (block_hash, hash);\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE VIEW outputs AS\nSELECT\n    hash AS transaction_hash,\n    block_hash,\n    block_number,\n    block_timestamp,\n    output.1 AS index,\n    output.2 AS script_asm,\n    output.3 AS script_hex,\n    output.4 AS required_signatures,\n    output.5 AS type,\n    output.6 AS addresses,\n    output.7 AS value\nFROM transactions\nARRAY JOIN outputs AS output;\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE VIEW inputs AS\nSELECT\n    hash AS transaction_hash,\n    block_hash,\n    block_number,\n    block_timestamp,\n    input.1 AS index,\n    input.2 AS spent_transaction_hash,\n    input.3 AS spent_output_index,\n    input.4 AS script_asm,\n    input.5 AS script_hex,\n    input.6 AS sequence,\n    input.7 AS required_signatures,\n    input.8 AS type,\n    input.9 AS addresses,\n    input.10 AS value\nFROM transactions\nARRAY JOIN inputs AS input;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"json-type",children:"JSON type"}),"\n",(0,s.jsx)(t.h3,{id:"blocksjson",children:"blocks.json"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"hash"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"stripped_size"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"weight"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"version"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"merkle_root"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timestamp"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"nonce"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"bits"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"coinbase_param"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"transaction_count"}),(0,s.jsx)(t.td,{children:"bigint"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"transactionsjson",children:"transactions.json"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"hash"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"size"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"virtual_size"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"version"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"lock_time"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"block_number"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"block_hash"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"block_timestamp"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"is_coinbase"}),(0,s.jsx)(t.td,{children:"boolean"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"index"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"inputs"}),(0,s.jsx)(t.td,{children:"[]transaction_input"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"outputs"}),(0,s.jsx)(t.td,{children:"[]transaction_output"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"input_count"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"output_count"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"input_value"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"output_value"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"fee"}),(0,s.jsx)(t.td,{children:"bigint"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"transaction_input",children:"transaction_input"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"index"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"spent_transaction_hash"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"spent_output_index"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"script_asm"}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"script_hex"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"sequence"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"required_signatures"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"type"}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"addresses"}),(0,s.jsx)(t.td,{children:"[]string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"value"}),(0,s.jsx)(t.td,{children:"bigint"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"transaction_output",children:"transaction_output"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Field"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"index"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"script_asm"}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"script_hex"}),(0,s.jsx)(t.td,{children:"hex_string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"required_signatures"}),(0,s.jsx)(t.td,{children:"bigint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"type"}),(0,s.jsx)(t.td,{children:"string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"addresses"}),(0,s.jsx)(t.td,{children:"[]string"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"value"}),(0,s.jsx)(t.td,{children:"bigint"})]})]})]})]})}function o(n={}){let{wrapper:t}={...(0,r.a)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},80980:function(n,t,e){e.d(t,{Z:()=>l,a:()=>d});var i=e(67294);let s={},r=i.createContext(s);function d(n){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function l(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:d(n.components),i.createElement(r.Provider,{value:t},n.children)}}}]);