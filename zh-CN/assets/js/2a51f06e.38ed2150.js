"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["92802"],{57234:function(n,e,t){t.d(e,{Z:()=>s});let s=t.p+"assets/images/bitcoin_data_pipeline-083bc34cccd93411924337896b88770f.png"},4023:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>r,default:()=>h,contentTitle:()=>l,assets:()=>o,toc:()=>c,metadata:()=>s});var s=JSON.parse('{"id":"bitcoin/clickhouse-schema","title":"04 ClickHouse Schema","description":"\u201CCreate Fat First, Then Make Tight\u201D \u2015 Overall Strategy","source":"@site/docs/bitcoin/clickhouse-schema.md","sourceDirName":"bitcoin","slug":"/bitcoin/clickhouse-schema","permalink":"/zh-CN/docs/next/bitcoin/clickhouse-schema","draft":false,"unlisted":false,"editUrl":"https://crowdin.com/project/docusaurus-v2/zh-CN","tags":[],"version":"current","lastUpdatedBy":"thebestornothing","lastUpdatedAt":1751428514000,"frontMatter":{},"sidebar":"bitcoin","previous":{"title":"04 ClickHouse Setup","permalink":"/zh-CN/docs/next/bitcoin/clickhouse-setup"},"next":{"title":"04 ClickHouse Data Sync","permalink":"/zh-CN/docs/next/bitcoin/clickhouse-data-sync"}}'),i=t(85893),a=t(80980);let r={},l="04 ClickHouse Schema",o={},c=[{value:"\u201CCreate Fat First, Then Make Tight\u201D \u2015 Overall Strategy",id:"create-fat-first-then-make-tight--overall-strategy",level:2},{value:"Block Staging Table <code>blocks_fat</code>",id:"block-staging-table-blocks_fat",level:2},{value:"Transaction Staging Table <code>transactions_fat</code>",id:"transaction-staging-table-transactions_fat",level:2},{value:"Normalized Inputs Table <code>inputs</code>",id:"normalized-inputs-table-inputs",level:2},{value:"Normalized Outputs Table <code>outputs</code>",id:"normalized-outputs-table-outputs",level:2},{value:"Address-Level Flat Table address_flat",id:"address-level-flat-table-address_flat",level:2},{value:"How the Pieces Fit Together (Logic Recap)",id:"how-the-pieces-fit-together-logic-recap",level:2}];function d(n){let e={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"04-clickhouse-schema",children:"04 ClickHouse Schema"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:t(57234).Z+"",width:"1536",height:"1024"})}),"\n",(0,i.jsx)(e.h2,{id:"create-fat-first-then-make-tight--overall-strategy",children:"\u201CCreate Fat First, Then Make Tight\u201D \u2015 Overall Strategy"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Concept:"})," Ingest raw blockchain data into ",(0,i.jsx)(e.strong,{children:"wide, append-only staging tables"})," (\u201Cfat\u201D tables). Once the data is complete and deduplicated, ",(0,i.jsx)(e.strong,{children:"transform and load"})," it into ",(0,i.jsx)(e.strong,{children:"narrow, query-optimized tables"})," (\u201Ctight\u201D tables).\n",(0,i.jsx)(e.strong,{children:"Benefits:"}),"\n\u2022 Simple, resilient ETL\u2014raw arrays are stored exactly once.\n\u2022 Historical re-processing is unnecessary; transformations are repeatable.\n\u2022 Final tables have smaller rows, sorted keys, and domain-specific indexes that accelerate analytics."]}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"block-staging-table-blocks_fat",children:["Block Staging Table ",(0,i.jsx)(e.code,{children:"blocks_fat"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Holds one row per Bitcoin block as retrieved from ",(0,i.jsx)(e.code,{children:"getblock"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Keeps the ",(0,i.jsx)(e.strong,{children:"full transaction list"})," in an ",(0,i.jsx)(e.code,{children:"Array(String)"})," for traceability."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," ensures automatic deduplication when re-ingesting the same block."]}),"\n",(0,i.jsxs)(e.li,{children:["Partition by ",(0,i.jsx)(e.code,{children:"toYYYYMM(timestamp_month)"})," so monthly maintenance (e.g., ",(0,i.jsx)(e.code,{children:"OPTIMIZE PARTITION"}),") is cheap."]}),"\n",(0,i.jsxs)(e.li,{children:["Primary key is the ",(0,i.jsx)(e.strong,{children:"block hash"}),"\u2014the canonical unique identifier."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE blocks_fat\n(\n  hash String,\n  size UInt64,\n  stripped_size UInt64,\n  weight UInt64,\n  number UInt64,\n  version UInt64,\n  merkle_root String,\n  timestamp DateTime,\n  timestamp_month Date,\n  nonce String,\n  bits String,\n  coinbase_param String,\n  previous_block_hash String,\n  difficulty Float64,\n  transaction_count UInt64,\n  transactions Array(String)\n)\nENGINE = ReplacingMergeTree()\nPRIMARY KEY (hash)\nPARTITION BY toYYYYMM(timestamp_month)\nORDER BY hash;\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"transaction-staging-table-transactions_fat",children:["Transaction Staging Table ",(0,i.jsx)(e.code,{children:"transactions_fat"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Stores raw transactions with their ",(0,i.jsx)(e.strong,{children:"full input/output arrays"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Partitions follow the block timestamp month for locality with ",(0,i.jsx)(e.code,{children:"blocks_fat"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Primary key is the ",(0,i.jsx)(e.strong,{children:"transaction hash"}),"; ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," again handles re-ingest deduplication."]}),"\n",(0,i.jsxs)(e.li,{children:["Subsequent ETL steps explode ",(0,i.jsx)(e.code,{children:"inputs"})," and ",(0,i.jsx)(e.code,{children:"outputs"})," into normalized tables."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE transactions_fat\n(\n  hash String,\n  size UInt64,\n  virtual_size UInt64,\n  version UInt64,\n  lock_time UInt64,\n  block_hash String,\n  block_number UInt64,\n  block_timestamp DateTime,\n  block_timestamp_month Date,\n  is_coinbase BOOL,\n  input_count UInt64,\n  output_count UInt64,\n  input_value Float64,\n  output_value Float64,\n  fee Float64,\n  inputs Array(Tuple(index UInt64, spent_transaction_hash String, spent_output_index UInt64, script_asm String, script_hex String, sequence UInt64, required_signatures UInt64, type String, addresses Array(String), value Float64)),\n  outputs Array(Tuple(index UInt64, script_asm String, script_hex String, required_signatures UInt64, type String, addresses Array(String), value Float64))\n)\nENGINE = ReplacingMergeTree()\nPRIMARY KEY (hash)\nPARTITION BY toYYYYMM(block_timestamp_month)\nORDER BY (hash);\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"normalized-inputs-table-inputs",children:["Normalized Inputs Table ",(0,i.jsx)(e.code,{children:"inputs"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["One row per ",(0,i.jsx)(e.strong,{children:"input"})," (UTXO spent)."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"spending_transaction_hash"})," & ",(0,i.jsx)(e.code,{children:"spending_output_index"})," provide a join back to the output being consumed."]}),"\n",(0,i.jsxs)(e.li,{children:["Ordering by ",(0,i.jsx)(e.code,{children:"(transaction_hash, input_index)"})," supports quick per-tx input scans."]}),"\n",(0,i.jsxs)(e.li,{children:["Ingest query ",(0,i.jsx)(e.strong,{children:"unwraps"})," the ",(0,i.jsx)(e.code,{children:"inputs"})," array via ",(0,i.jsx)(e.code,{children:"ARRAY JOIN"}),", filtering by a desired date range."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE inputs\n(\n    transaction_hash String,\n    input_index UInt64,\n    block_hash String,\n    block_number UInt64,\n    block_timestamp DateTime,\n    spending_transaction_hash String,\n    spending_output_index UInt64,\n    script_asm String,\n    script_hex String,\n    sequence UInt64,\n    required_signatures UInt64,\n    type String,\n    addresses Array(String),\n    value Float64\n)\nENGINE = ReplacingMergeTree(block_timestamp)\nPARTITION BY toYYYYMM(block_timestamp)\nORDER BY (transaction_hash, input_index);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Initial Load (array \u2192 rows)"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO inputs\nSELECT\n    t.hash AS transaction_hash,\n    input.1 AS input_index,\n    t.block_hash,\n    t.block_number,\n    t.block_timestamp,\n    input.2 AS spending_transaction_hash,\n    input.3 AS spending_output_index,\n    input.4 AS script_asm,\n    input.5 AS script_hex,\n    input.6 AS sequence,\n    input.7 AS required_signatures,\n    input.8 AS type,\n    input.9 AS addresses,\n    input.10 AS value\nFROM transactions_fat AS t\nARRAY JOIN t.inputs AS input\nWHERE t.block_timestamp >= '2009-01-01'\n  AND t.block_timestamp < '2013-01-01';\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"normalized-outputs-table-outputs",children:["Normalized Outputs Table ",(0,i.jsx)(e.code,{children:"outputs"})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["One row per ",(0,i.jsx)(e.strong,{children:"output"})," (creates a UTXO)."]}),"\n",(0,i.jsxs)(e.li,{children:["Initially loaded with \u201Cunspent-placeholder\u201D fields (",(0,i.jsx)(e.code,{children:"spent_* = '' / 0 / epoch"}),")."]}),"\n",(0,i.jsxs)(e.li,{children:["Second pass joins ",(0,i.jsx)(e.code,{children:"inputs"})," \u2192 ",(0,i.jsx)(e.code,{children:"outputs"})," to mark spent outputs and timestamp the spend."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ReplacingMergeTree(spent_block_timestamp)"})," makes late-arriving spend updates trivial."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE outputs\n(\n    transaction_hash String,\n    output_index UInt64,\n    block_hash String,\n    block_number UInt64,\n    block_timestamp DateTime,\n    spent_transaction_hash String,\n    spent_input_index UInt64,\n    spent_block_hash String,\n    spent_block_number UInt64,\n    spent_block_timestamp DateTime,\n    script_asm String,\n    script_hex String,\n    required_signatures UInt64,\n    type String,\n    addresses Array(String),\n    value Float64\n)\nENGINE = ReplacingMergeTree(spent_block_timestamp)\nPARTITION BY toYYYYMM(block_timestamp)\nORDER BY (transaction_hash, output_index);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Phase 1: Load unspent outputs"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO outputs\nSELECT\n    t.hash AS transaction_hash,\n    output.1 AS output_index,\n    t.block_hash,\n    t.block_number,\n    t.block_timestamp,\n    '' AS spent_transaction_hash,\n    0 AS spent_input_index,\n    '' AS spent_block_hash,\n    0 AS spent_block_number,\n    toDateTime('1970-01-01 00:00:00') AS spent_block_timestamp,\n    output.2 AS script_asm,\n    output.3 AS script_hex,\n    output.4 AS required_signatures,\n    output.5 AS type,\n    output.6 AS addresses,\n    output.7 AS value\nFROM transactions_fat AS t\nARRAY JOIN t.outputs AS output\nWHERE t.block_timestamp >= '2009-01-01'\n  AND t.block_timestamp < '2013-01-01';\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Phase 2: Mark outputs as spent"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO outputs\nSELECT\n    o.transaction_hash,\n    o.output_index,\n    o.block_hash,\n    o.block_number,\n    o.block_timestamp,\n    i.transaction_hash          AS spent_transaction_hash,\n    i.input_index               AS spent_input_index,\n    i.block_hash                AS spent_block_hash,\n    i.block_number              AS spent_block_number,\n    i.block_timestamp           AS spent_block_timestamp,\n    o.script_asm,\n    o.script_hex,\n    o.required_signatures,\n    o.type,\n    o.addresses,\n    o.value\nFROM inputs AS i\nINNER JOIN outputs AS o\n    ON i.spending_transaction_hash = o.transaction_hash\n   AND i.spending_output_index = o.output_index\nWHERE toYYYYMM(i.block_timestamp) >= 200901\n  AND toYYYYMM(i.block_timestamp) < 201301;\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Finalize deduplication"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"OPTIMIZE TABLE outputs FINAL;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"address-level-flat-table-address_flat",children:"Address-Level Flat Table address_flat"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Explodes each output into ",(0,i.jsx)(e.strong,{children:"one row per address"}),", enabling fast balance/history queries."]}),"\n",(0,i.jsxs)(e.li,{children:["Key ordering ",(0,i.jsx)(e.code,{children:"(address, transaction_hash, output_index)"})," aligns with the most common analytics pattern: \u201Call activity for address X\u201D."]}),"\n",(0,i.jsxs)(e.li,{children:["A materialized view (",(0,i.jsx)(e.code,{children:"address_flat_mv"}),") keeps the table automatically synchronized with ",(0,i.jsx)(e.code,{children:"outputs"}),", removing manual ETL."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE address_flat\n(\n    transaction_hash String,\n    output_index UInt64,\n    block_hash String,\n    block_number UInt64,\n    block_timestamp DateTime,\n    address String,\n    value Float64,\n    spent_transaction_hash String,\n    spent_input_index UInt64,\n    spent_block_hash String,\n    spent_block_number UInt64,\n    spent_block_timestamp DateTime,\n)\nENGINE = ReplacingMergeTree(spent_block_timestamp)\nPARTITION BY toYYYYMM(block_timestamp)\nORDER BY (address, transaction_hash, output_index);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"One-off backfill (optional if MV is created first)"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO address_flat\nSELECT\n    o.transaction_hash,\n    o.output_index,\n    o.block_hash,\n    o.block_number,\n    o.block_timestamp,\n    address,\n    o.value,\n    o.spent_transaction_hash,\n    o.spent_input_index,\n    o.spent_block_hash,\n    o.spent_block_number,\n    o.spent_block_timestamp,\nFROM outputs AS o\nARRAY JOIN o.addresses AS address;\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Continuous sync"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW address_flat_mv\nTO address_flat\nAS\nSELECT\n    o.transaction_hash,\n    o.output_index,\n    o.block_hash,\n    o.block_number,\n    o.block_timestamp,\n    address,\n    o.value,\n    o.spent_transaction_hash,\n    o.spent_input_index,\n    o.spent_block_hash,\n    o.spent_block_number,\n    o.spent_block_timestamp\nFROM outputs AS o\nARRAY JOIN o.addresses AS address;\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Example query: Satoshi\u2019s famously untouched balance"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT\n    sum(value) / 100000000.0 AS balance\nFROM address_flat FINAL\nWHERE address = '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'\n  AND spent_transaction_hash = '';\n"})}),"\n",(0,i.jsx)(e.h2,{id:"how-the-pieces-fit-together-logic-recap",children:"How the Pieces Fit Together (Logic Recap)"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Raw ingestion"})," happens once into ",(0,i.jsx)(e.code,{children:"blocks_fat"})," and ",(0,i.jsx)(e.code,{children:"transactions_fat"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Arrays are ",(0,i.jsx)(e.strong,{children:"exploded"})," into ",(0,i.jsx)(e.code,{children:"inputs"})," and ",(0,i.jsx)(e.code,{children:"outputs"}),", bringing UTXO granularity."]}),"\n",(0,i.jsxs)(e.li,{children:["A ",(0,i.jsx)(e.strong,{children:"self-join"})," marks outputs as spent, propagating spend metadata forward."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"address_flat"})," (via MV) denormalizes to address level for everyday analytics."]}),"\n",(0,i.jsxs)(e.li,{children:["Because every table is a ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"}),", ",(0,i.jsx)(e.em,{children:"idempotent"})," re-loads are safe\u2014essential for long-running blockchain syncs."]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Forward-looking tip:"})," Once your \u201Ctight\u201D tables stabilize, consider Time-to-Live (TTL) in ClickHouse to automatically purge any stale duplicates retained by the ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," versioning\u2014keeping storage lean without manual ",(0,i.jsx)(e.code,{children:"OPTIMIZE FINAL"})," cycles."]}),"\n"]})]})}function h(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},80980:function(n,e,t){t.d(e,{Z:()=>l,a:()=>r});var s=t(67294);let i={},a=s.createContext(i);function r(n){let e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);