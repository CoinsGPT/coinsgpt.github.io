"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["1853"],{57234:function(n,e,t){t.d(e,{Z:()=>s});let s=t.p+"assets/images/bitcoin_data_pipeline-083bc34cccd93411924337896b88770f.png"},3805:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>d,default:()=>h,contentTitle:()=>c,assets:()=>l,toc:()=>a,metadata:()=>s});var s=JSON.parse('{"id":"bitcoin/clickhouse-schema","title":"04 ClickHouse Schema","description":"Overall Strategy","source":"@site/versioned_docs/version-3.7.1/bitcoin/clickhouse-schema.md","sourceDirName":"bitcoin","slug":"/bitcoin/clickhouse-schema","permalink":"/zh-CN/docs/bitcoin/clickhouse-schema","draft":false,"unlisted":false,"editUrl":"https://crowdin.com/project/docusaurus-v2/zh-CN","tags":[],"version":"3.7.1","frontMatter":{},"sidebar":"bitcoin","previous":{"title":"04 ClickHouse Setup","permalink":"/zh-CN/docs/bitcoin/clickhouse-setup"},"next":{"title":"05 Bitcoin Data Consistency","permalink":"/zh-CN/docs/bitcoin/bitcoin-data-consistency"}}'),i=t(85893),r=t(80980);let d={},c="04 ClickHouse Schema",l={},a=[{value:"Overall Strategy",id:"overall-strategy",level:2},{value:"Block_fat Table",id:"block_fat-table",level:2},{value:"Block Table",id:"block-table",level:2},{value:"Transaction_fat Table",id:"transaction_fat-table",level:2},{value:"Transaction Table",id:"transaction-table",level:2},{value:"Inputs Table",id:"inputs-table",level:2},{value:"Outputs Table",id:"outputs-table",level:2},{value:"Addresses Table",id:"addresses-table",level:2},{value:"How the Pieces Fit Together",id:"how-the-pieces-fit-together",level:2}];function o(n){let e={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",style:"style",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"04-clickhouse-schema",children:"04 ClickHouse Schema"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:t(57234).Z+"",width:"1536",height:"1024"})}),"\n",(0,i.jsx)(e.h2,{id:"overall-strategy",children:"Overall Strategy"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["Create Fat First, Then Make Tight\n",(0,i.jsx)(e.strong,{children:"Concept:"})," Ingest raw blockchain data into ",(0,i.jsx)(e.strong,{children:"wide, append-only staging tables"})," (\u201Cfat\u201D tables). Once the data is complete and deduplicated, ",(0,i.jsx)(e.strong,{children:"transform and load"})," it into ",(0,i.jsx)(e.strong,{children:"narrow, query-optimized tables"})," (\u201Ctight\u201D tables).\n",(0,i.jsx)(e.strong,{children:"Benefits:"}),"\nSimple, resilient ETL\u2014raw arrays are stored exactly once.\nHistorical re-processing is unnecessary; transformations are repeatable.\nFinal tables have smaller rows, sorted keys, and domain-specific indexes that accelerate analytics."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"block_fat-table",children:"Block_fat Table"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Holds one row per Bitcoin block as retrieved from ",(0,i.jsx)(e.code,{children:"getblock"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Keeps the ",(0,i.jsx)(e.strong,{children:"full transaction list"})," in an ",(0,i.jsx)(e.code,{children:"Array(String)"})," for traceability."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," ensures automatic deduplication when re-ingesting the same block."]}),"\n",(0,i.jsxs)(e.li,{children:["Partition by ",(0,i.jsx)(e.code,{children:"toYYYYMM(timestamp_month)"})," so monthly maintenance (e.g., ",(0,i.jsx)(e.code,{children:"OPTIMIZE PARTITION"}),") is cheap."]}),"\n",(0,i.jsxs)(e.li,{children:["Primary key is the ",(0,i.jsx)(e.strong,{children:"block hash"}),"\u2014the canonical unique identifier."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE blocks_fat\n(\n  hash String,\n  size UInt64,\n  stripped_size UInt64,\n  weight UInt64,\n  number UInt64,\n  version UInt64,\n  merkle_root String,\n  timestamp DateTime,\n  timestamp_month Date,\n  nonce String,\n  bits String,\n  coinbase_param String,\n  previous_block_hash String,\n  difficulty Float64,\n  transaction_count UInt64,\n  transactions Array(String)\n)\nENGINE = ReplacingMergeTree()\nPRIMARY KEY (hash)\nPARTITION BY toYYYYMM(timestamp_month)\nORDER BY hash;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"block-table",children:"Block Table"}),"\n",(0,i.jsx)(e.p,{children:"The revision column in your blocks table is used to distinguish different versions or revisions of the same data row (keyed by hash) in the ReplacingMergeTree. This enables maintain and update rows over time and identify whether a row is an original copy or has been enriched or modified"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE blocks\n(\n  hash String,\n  size UInt64,\n  stripped_size UInt64,\n  weight UInt64,\n  number UInt64,\n  version UInt64,\n  merkle_root String,\n  timestamp DateTime,\n  timestamp_month Date,\n  nonce String,\n  bits String,\n  coinbase_param String,\n  previous_block_hash String,\n  difficulty Float64,\n  transaction_count UInt64,\n  transactions Array(String),\n  total_fees Float64,\n  subsidy Float64,\n  reward Float64,\n  coinbase_transaction String,\n  coinbase_addresses Array(String),\n  input_count UInt64,\n  input_value Float64,\n  output_count UInt64,\n  output_value Float64,\n  revision UInt64\n)\nENGINE = ReplacingMergeTree(revision)\nPRIMARY KEY (hash)\nPARTITION BY toYYYYMM(timestamp)\nORDER BY hash;\n"})}),"\n",(0,i.jsx)(e.p,{children:"Original raw copy from blocks_fat (minimal schema). when copying the original data, default values are added for the extra fields"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"    INSERT INTO blocks\n    SELECT\n      hash,\n      size,\n      stripped_size,\n      weight,\n      number,\n      version,\n      merkle_root,\n      timestamp,\n      timestamp_month,\n      nonce,\n      bits,\n      coinbase_param,\n      previous_block_hash,\n      difficulty,\n      transaction_count,\n      transactions,\n      0.0 AS total_fees,\n      0.0 AS subsidy,\n      0.0 AS reward,\n      '' AS coinbase_transaction,\n      [] AS coinbase_addresses,\n      0 AS input_count,\n      0.0 AS input_value,\n      0 AS output_count,\n      0.0 AS output_value,\n      0 AS revision\n    FROM blocks_fat\n    WHERE toYYYYMM(timestamp) = 200901\n"})}),"\n",(0,i.jsx)(e.style,{children:"\ntable {\n  width: 100%;\n  table-layout: fixed;\n}\n\n| Column                 | Revision | Description                                                       |\n| ---------------------- | -------- | ----------------------------------------------------------------- |\n| `total_fees`           | \u274C       | Sum of all transaction fees in block (input value - output value) |\n| `subsidy`              | \u274C       | Block subsidy (depends on height)                                 |\n| `reward`               | \u274C       | subsidy + total_fees                                              |\n| `coinbase_transaction` | \u274C       | Coinbase TX ID (first transaction)                                |\n| `coinbase_addresses`   | \u274C       | Addresses in the coinbase transaction\u2019s outputs                   |\n| `input_count`          | \u274C       | Total number of inputs in all transactions                        |\n| `input_value`          | \u274C       | Total value of all inputs                                         |\n| `output_count`         | \u274C       | Total number of outputs in all transactions                       |\n| `output_value`         | \u274C       | Total value of all outputs                                        |\n| `hash`                 | 0        | Block hash (primary key)                                          |\n| `size`                 | 0        | Block size in bytes                                               |\n| `stripped_size`        | 0        | Block size without witness data                                   |\n| `weight`               | 0        | Block weight (segwit)                                             |\n| `number`               | 0        | Block height                                                      |\n| `version`              | 0        | Block version                                                     |\n| `merkle_root`          | 0        | Merkle root of transactions                                       |\n| `timestamp`            | 0        | Timestamp of block                                                |\n| `timestamp_month`      | 0        | Date part (month) of timestamp                                    |\n| `nonce`                | 0        | Nonce used for PoW                                                |\n| `bits`                 | 0        | Difficulty bits format                                            |\n| `coinbase_param`       | 0        | Raw coinbase input script param                                   |\n| `previous_block_hash`  | 0        | Hash of previous block                                            |\n| `difficulty`           | 0        | Difficulty target                                                 |\n| `transaction_count`    | 0        | Number of transactions in block                                   |\n| `transactions`         | 0        | Array of TXIDs in the block                                       |\n\n"}),"\n",(0,i.jsx)(e.h2,{id:"transaction_fat-table",children:"Transaction_fat Table"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Stores raw transactions with their ",(0,i.jsx)(e.strong,{children:"full input/output arrays"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Partitions follow the block timestamp month for locality with ",(0,i.jsx)(e.code,{children:"blocks_fat"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Primary key is the ",(0,i.jsx)(e.strong,{children:"transaction hash"}),"; ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," again handles re-ingest deduplication."]}),"\n",(0,i.jsxs)(e.li,{children:["Subsequent ETL steps explode ",(0,i.jsx)(e.code,{children:"inputs"})," and ",(0,i.jsx)(e.code,{children:"outputs"})," into normalized tables."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE transactions_fat\n(\n  hash String,\n  size UInt64,\n  virtual_size UInt64,\n  version UInt64,\n  lock_time UInt64,\n  block_hash String,\n  block_number UInt64,\n  block_timestamp DateTime,\n  block_timestamp_month Date,\n  is_coinbase BOOL,\n  input_count UInt64,\n  output_count UInt64,\n  input_value Float64,\n  output_value Float64,\n  fee Float64,\n  inputs Array(Tuple(index UInt64, spent_transaction_hash String, spent_output_index UInt64, script_asm String, script_hex String, sequence UInt64, required_signatures UInt64, type String, addresses Array(String), value Float64)),\n  outputs Array(Tuple(index UInt64, script_asm String, script_hex String, required_signatures UInt64, type String, addresses Array(String), value Float64))\n)\nENGINE = ReplacingMergeTree()\nPRIMARY KEY (hash)\nPARTITION BY toYYYYMM(block_timestamp_month)\nORDER BY (hash);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"transaction-table",children:"Transaction Table"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE transactions\n(\n  hash String,\n  size UInt64,\n  virtual_size UInt64,\n  version UInt64,\n  lock_time UInt64,\n  block_hash String,\n  block_number UInt64,\n  block_timestamp DateTime,\n  block_timestamp_month Date,\n  is_coinbase BOOL,\n  input_count UInt64,\n  output_count UInt64,\n  input_value Float64,\n  output_value Float64,\n  fee Float64,\n  inputs Array(Tuple(index UInt64, spent_transaction_hash String, spent_output_index UInt64, script_asm String, script_hex String, sequence UInt64, required_signatures UInt64, type String, addresses Array(String), value Float64)),\n  outputs Array(Tuple(index UInt64, script_asm String, script_hex String, required_signatures UInt64, type String, addresses Array(String), value Float64)),\n  revision UInt64\n)\nENGINE = ReplacingMergeTree(revision)\nPRIMARY KEY (hash)\nPARTITION BY toYYYYMM(block_timestamp)\nORDER BY (hash);\n"})}),"\n",(0,i.jsx)(e.p,{children:"Original copy from transactions_fat, Raw import. Field spending_transaction_hash equals spent_transaction_hash, spending_output_index equals spent_output_index. Only add revision filed."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO transactions\nSELECT\n  hash,\n  size,\n  virtual_size,\n  version,\n  lock_time,\n  block_hash,\n  block_number,\n  block_timestamp,\n  block_timestamp_month,\n  is_coinbase,\n  input_count,\n  output_count,\n  input_value,\n  output_value,\n  fee,\n  inputs,\n  outputs,\n  0 AS revision\nFROM transactions_fat\nWHERE toYYYYMM(block_timestamp) >= 200901\n  AND toYYYYMM(block_timestamp) < 200903;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"inputs-table",children:"Inputs Table"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["One row per ",(0,i.jsx)(e.strong,{children:"input"})," (UTXO spent)."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"spending_transaction_hash"})," & ",(0,i.jsx)(e.code,{children:"spending_output_index"})," provide a join back to the output being consumed."]}),"\n",(0,i.jsxs)(e.li,{children:["Ordering by ",(0,i.jsx)(e.code,{children:"(transaction_hash, input_index)"})," supports quick per-tx input scans."]}),"\n",(0,i.jsxs)(e.li,{children:["Ingest query ",(0,i.jsx)(e.strong,{children:"unwraps"})," the ",(0,i.jsx)(e.code,{children:"inputs"})," array via ",(0,i.jsx)(e.code,{children:"ARRAY JOIN"}),", filtering by a desired date range."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE inputs\n(\n    transaction_hash String,\n    input_index UInt64,\n    block_hash String,\n    block_number UInt64,\n    block_timestamp DateTime,\n    spending_transaction_hash String,\n    spending_output_index UInt64,\n    script_asm String,\n    script_hex String,\n    sequence UInt64,\n    required_signatures UInt64,\n    type String,\n    addresses Array(String),\n    value Float64,\n    revision UInt64\n)\nENGINE = ReplacingMergeTree(revision)\nPARTITION BY toYYYYMM(block_timestamp)\nPRIMARY KEY (transaction_hash, input_index)\nORDER BY (transaction_hash, input_index);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Initial Load (array \u2192 rows)"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO inputs\nSELECT\n    t.hash AS transaction_hash,\n    input.1 AS input_index,\n    t.block_hash,\n    t.block_number,\n    t.block_timestamp,\n    input.2 AS spending_transaction_hash,\n    input.3 AS spending_output_index,\n    input.4 AS script_asm,\n    input.5 AS script_hex,\n    input.6 AS sequence,\n    input.7 AS required_signatures,\n    input.8 AS type,\n    input.9 AS addresses,\n    input.10 AS value,\n    0 as revision\nFROM transactions AS t\nARRAY JOIN t.inputs AS input\nWHERE toYYYYMM(t.block_timestamp) >= 200901\n  AND toYYYYMM(t.block_timestamp) < 200903;\n"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Column"}),(0,i.jsx)(e.th,{children:"Revision"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"transaction_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the transaction this input belongs to"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"input_index"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Index of the input in the transaction's input array"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the block that includes this transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_number"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Height of the block containing the transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_timestamp"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Timestamp of the block"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spending_transaction_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the previous (spent) transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spending_output_index"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Index of the output in the previous transaction being spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_asm"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in human-readable ASM format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_hex"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in hexadecimal format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"sequence"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Sequence number of the input"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"required_signatures"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Number of required signatures to spend this input"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"type"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsxs)(e.td,{children:["Script type (e.g., ",(0,i.jsx)(e.code,{children:"pubkeyhash"}),", ",(0,i.jsx)(e.code,{children:"multisig"}),")"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"addresses"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Array of decoded Bitcoin addresses related to this input"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"value"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Value of the input in BTC"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"revision"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsxs)(e.td,{children:["Revision number for ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," version control"]})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"outputs-table",children:"Outputs Table"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["One row per ",(0,i.jsx)(e.strong,{children:"output"})," (creates a UTXO)."]}),"\n",(0,i.jsxs)(e.li,{children:["Initially loaded with \u201Cunspent-placeholder\u201D fields (",(0,i.jsx)(e.code,{children:"spent_* = '' / 0 / epoch"}),")."]}),"\n",(0,i.jsxs)(e.li,{children:["Second pass joins ",(0,i.jsx)(e.code,{children:"inputs"})," \u2192 ",(0,i.jsx)(e.code,{children:"outputs"})," to mark spent outputs and timestamp the spend."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"ReplacingMergeTree(spent_block_timestamp)"})," makes late-arriving spend updates trivial."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE outputs\n(\n    transaction_hash String,\n    output_index UInt64,\n    block_hash String,\n    block_number UInt64,\n    block_timestamp DateTime,\n    spent_transaction_hash String,\n    spent_input_index UInt64,\n    spent_block_hash String,\n    spent_block_number UInt64,\n    spent_block_timestamp DateTime,\n    script_asm String,\n    script_hex String,\n    required_signatures UInt64,\n    type String,\n    addresses Array(String),\n    value Float64,\n    is_coinbase BOOL,\n    revision UInt64\n)\nENGINE = ReplacingMergeTree(revision)\nPARTITION BY toYYYYMM(block_timestamp)\nPRIMARY KEY (transaction_hash, output_index)\nORDER BY (transaction_hash, output_index);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Phase 1: Load unspent outputs"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO outputs\nSELECT\n    t.hash AS transaction_hash,\n    output.1 AS output_index,\n    t.block_hash,\n    t.block_number,\n    t.block_timestamp,\n    '' AS spent_transaction_hash,\n    0 AS spent_input_index,\n    '' AS spent_block_hash,\n    0 AS spent_block_number,\n    toDateTime('1970-01-01 00:00:00') AS spent_block_timestamp,\n    output.2 AS script_asm,\n    output.3 AS script_hex,\n    output.4 AS required_signatures,\n    output.5 AS type,\n    output.6 AS addresses,\n    output.7 AS value,\n    t.is_coinbase AS is_coinbase,\n    0 AS revision\nFROM transactions AS t\nARRAY JOIN t.outputs AS output\nWHERE toYYYYMM(t.block_timestamp) >= 200901\n  AND toYYYYMM(t.block_timestamp) < 200903;\n"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Column"}),(0,i.jsx)(e.th,{children:"Revision"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"transaction_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the transaction this output belongs to"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"output_index"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Index of the output within the transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the block containing this transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_number"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Height of the block containing the transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_timestamp"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Timestamp of the block"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_transaction_hash"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Hash of the transaction that spent this output"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_input_index"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Input index in the spending transaction that consumed this output"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_block_hash"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Hash of the block where the output was spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_block_number"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Height of the block where the output was spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_block_timestamp"})}),(0,i.jsx)(e.td,{children:"\u274C"}),(0,i.jsx)(e.td,{children:"Timestamp of the block where the output was spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_asm"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in human-readable ASM format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_hex"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in hexadecimal format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"required_signatures"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Number of required signatures to spend this output"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"type"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsxs)(e.td,{children:["Output script type (e.g., ",(0,i.jsx)(e.code,{children:"pubkeyhash"}),", ",(0,i.jsx)(e.code,{children:"nulldata"}),", ",(0,i.jsx)(e.code,{children:"multisig"}),")"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"addresses"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Array of decoded Bitcoin addresses this output is associated with"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"value"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Value of the output in BTC"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"is_coinbase"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Whether the output originates from a coinbase transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"revision"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsxs)(e.td,{children:["Revision number for ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," version control"]})]})]})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Phase 2: Mark outputs as spent"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO outputs\nSELECT\n    o.transaction_hash,\n    o.output_index,\n    o.block_hash,\n    o.block_number,\n    o.block_timestamp,\n    i.transaction_hash          AS spent_transaction_hash,\n    i.input_index               AS spent_input_index,\n    i.block_hash                AS spent_block_hash,\n    i.block_number              AS spent_block_number,\n    i.block_timestamp           AS spent_block_timestamp,\n    o.script_asm,\n    o.script_hex,\n    o.required_signatures,\n    o.type,\n    o.addresses,\n    o.value,\n    o.is_coinbase,\n    1 AS revision\nFROM inputs AS i\nINNER JOIN outputs AS o\n    ON i.spending_transaction_hash = o.transaction_hash\n   AND i.spending_output_index = o.output_index\nWHERE toYYYYMM(i.block_timestamp) >= 200901\n  AND toYYYYMM(i.block_timestamp) < 200903;\n"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Column"}),(0,i.jsx)(e.th,{children:"Revision"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"transaction_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the transaction this output belongs to"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"output_index"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Index of the output within the transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the block containing this transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_number"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Height of the block containing the transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_timestamp"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Timestamp of the block"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_transaction_hash"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Hash of the transaction that spent this output"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_input_index"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Input index in the spending transaction that consumed this output"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_block_hash"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Hash of the block where the output was spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_block_number"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Height of the block where the output was spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spent_block_timestamp"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Timestamp of the block where the output was spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_asm"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in human-readable ASM format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_hex"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in hexadecimal format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"required_signatures"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Number of required signatures to spend this output"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"type"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsxs)(e.td,{children:["Output script type (e.g., ",(0,i.jsx)(e.code,{children:"pubkeyhash"}),", ",(0,i.jsx)(e.code,{children:"nulldata"}),", ",(0,i.jsx)(e.code,{children:"multisig"}),")"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"addresses"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Array of decoded Bitcoin addresses this output is associated with"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"value"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Value of the output in BTC"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"is_coinbase"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Whether the output originates from a coinbase transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"revision"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsxs)(e.td,{children:["Revision number for ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," version control"]})]})]})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Phase 3: Enrich inputs by outputs"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO inputs\nSELECT\n    i.transaction_hash,\n    i.input_index,\n    i.block_hash,\n    i.block_number,\n    i.block_timestamp,\n    i.spending_transaction_hash,\n    i.spending_output_index,\n    i.script_asm,\n    i.script_hex,\n    i.sequence,\n    o.required_signatures AS required_signatures,\n    o.type AS type,\n    o.addresses AS addresses,\n    o.value AS value,\n    1 AS revision\nFROM inputs AS i\nINNER JOIN outputs AS o\n    ON i.spending_transaction_hash = o.transaction_hash\n   AND i.spending_output_index = o.output_index\nWHERE toYYYYMM(i.block_timestamp) >= 200901\n  AND toYYYYMM(i.block_timestamp) < 200903;\n"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Column"}),(0,i.jsx)(e.th,{children:"Revision"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"transaction_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the transaction this input belongs to"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"input_index"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Index of the input in the transaction's input array"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the block that includes this transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_number"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Height of the block containing the transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"block_timestamp"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Timestamp of the block"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spending_transaction_hash"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Hash of the previous (spent) transaction"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"spending_output_index"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Index of the output in the previous transaction being spent"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_asm"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in human-readable ASM format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"script_hex"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Script in hexadecimal format"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"sequence"})}),(0,i.jsx)(e.td,{children:"0"}),(0,i.jsx)(e.td,{children:"Sequence number of the input"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"required_signatures"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Number of required signatures to spend this input"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"type"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsxs)(e.td,{children:["Script type (e.g., ",(0,i.jsx)(e.code,{children:"pubkeyhash"}),", ",(0,i.jsx)(e.code,{children:"multisig"}),")"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"addresses"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Array of decoded Bitcoin addresses related to this input"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"value"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsx)(e.td,{children:"Value of the input in BTC"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"revision"})}),(0,i.jsx)(e.td,{children:"1"}),(0,i.jsxs)(e.td,{children:["Revision number for ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," version control"]})]})]})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Finalize deduplication"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"OPTIMIZE TABLE outputs FINAL;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"addresses-table",children:"Addresses Table"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Purpose & Rationale"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Explodes each output into ",(0,i.jsx)(e.strong,{children:"one row per address"}),", enabling fast balance/history queries."]}),"\n",(0,i.jsxs)(e.li,{children:["Key ordering ",(0,i.jsx)(e.code,{children:"(address, transaction_hash, output_index)"})," aligns with the most common analytics pattern: \u201Call activity for address X\u201D."]}),"\n",(0,i.jsxs)(e.li,{children:["A materialized view (",(0,i.jsx)(e.code,{children:"address_flat_mv"}),") keeps the table automatically synchronized with ",(0,i.jsx)(e.code,{children:"outputs"}),", removing manual ETL."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE addresses\n(\n    transaction_hash String,\n    output_index UInt64,\n    block_hash String,\n    block_number UInt64,\n    block_timestamp DateTime,\n    address String,\n    value Float64,\n    spent_transaction_hash String,\n    spent_input_index UInt64,\n    spent_block_hash String,\n    spent_block_number UInt64,\n    spent_block_timestamp DateTime,\n    revision UInt64\n)\nENGINE = ReplacingMergeTree(revision)\nPARTITION BY toYYYYMM(block_timestamp)\nPRIMARY KEY (address, transaction_hash, output_index)\nORDER BY (address, transaction_hash, output_index);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"One-off backfill (optional if MV is created first)"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"INSERT INTO addresses\nSELECT\n    o.transaction_hash,\n    o.output_index,\n    o.block_hash,\n    o.block_number,\n    o.block_timestamp,\n    address,\n    o.value,\n    o.spent_transaction_hash,\n    o.spent_input_index,\n    o.spent_block_hash,\n    o.spent_block_number,\n    o.spent_block_timestamp,\n    o.revision\nFROM outputs AS o\nARRAY JOIN o.addresses AS address;\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Continuous sync"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW addresses_mv\nTO addresses\nAS\nSELECT\n    o.transaction_hash,\n    o.output_index,\n    o.block_hash,\n    o.block_number,\n    o.block_timestamp,\n    address,\n    o.value,\n    o.spent_transaction_hash,\n    o.spent_input_index,\n    o.spent_block_hash,\n    o.spent_block_number,\n    o.spent_block_timestamp,\n    o.revision\nFROM outputs AS o\nARRAY JOIN o.addresses AS address\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Example query: Satoshi\u2019s famously untouched balance"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sql",children:"SELECT sum(value) / 100000000. AS balance\nFROM addresses\nFINAL\nWHERE (address = '12higDjoCCNXSA95xZMWUdPvXNmkAduhWv') AND (spent_transaction_hash = '')\n"})}),"\n",(0,i.jsx)(e.h2,{id:"how-the-pieces-fit-together",children:"How the Pieces Fit Together"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Raw ingestion"})," happens once into ",(0,i.jsx)(e.code,{children:"blocks_fat"})," and ",(0,i.jsx)(e.code,{children:"transactions_fat"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:["Arrays are ",(0,i.jsx)(e.strong,{children:"exploded"})," into ",(0,i.jsx)(e.code,{children:"inputs"})," and ",(0,i.jsx)(e.code,{children:"outputs"}),", bringing UTXO granularity."]}),"\n",(0,i.jsxs)(e.li,{children:["A ",(0,i.jsx)(e.strong,{children:"self-join"})," marks outputs as spent, propagating spend metadata forward."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"address_flat"})," (via MV) denormalizes to address level for everyday analytics."]}),"\n",(0,i.jsxs)(e.li,{children:["Because every table is a ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"}),", ",(0,i.jsx)(e.em,{children:"idempotent"})," re-loads are safe\u2014essential for long-running blockchain syncs."]}),"\n"]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Forward-looking tip:"})," Once your \u201Ctight\u201D tables stabilize, consider Time-to-Live (TTL) in ClickHouse to automatically purge any stale duplicates retained by the ",(0,i.jsx)(e.code,{children:"ReplacingMergeTree"})," versioning\u2014keeping storage lean without manual ",(0,i.jsx)(e.code,{children:"OPTIMIZE FINAL"})," cycles."]}),"\n"]})]})}function h(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},80980:function(n,e,t){t.d(e,{Z:()=>c,a:()=>d});var s=t(67294);let i={},r=s.createContext(i);function d(n){let e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:d(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);