"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["95756"],{91014:function(n,t,e){e.r(t),e.d(t,{frontMatter:()=>o,default:()=>d,contentTitle:()=>r,assets:()=>c,toc:()=>l,metadata:()=>i});var i=JSON.parse('{"id":"bitcoin/bitcoin-data-verfication","title":"06 Bitcoin Data Verification","description":"To verify that Bitcoin block and transaction data is complete in ClickHouse, you need to ensure:","source":"@site/docs/bitcoin/bitcoin-data-verfication.md","sourceDirName":"bitcoin","slug":"/bitcoin/bitcoin-data-verfication","permalink":"/docs/next/bitcoin/bitcoin-data-verfication","draft":false,"unlisted":false,"editUrl":"https://github.com/coinsgpt/coinsgpt.github.io/edit/main/website/docs/bitcoin/bitcoin-data-verfication.md","tags":[],"version":"current","lastUpdatedBy":"thebestornothing","lastUpdatedAt":1750249261000,"frontMatter":{},"sidebar":"bitcoin","previous":{"title":"05 ClickHouse Kafka Engine","permalink":"/docs/next/bitcoin/kafka-table-engine"},"next":{"title":"07 Import Bitcoin into Tigergraph","permalink":"/docs/next/bitcoin/bitcoin-tigergraph"}}'),s=e(85893),a=e(80980);let o={},r="06 Bitcoin Data Verification",c={},l=[{value:"1. block height continuity",id:"1-block-height-continuity",level:2},{value:"2. Check for duplicate blocks",id:"2-check-for-duplicate-blocks",level:2},{value:"3.Transactions Missing",id:"3transactions-missing",level:2},{value:"3.Transactions Missing Reverse",id:"3transactions-missing-reverse",level:2},{value:"4. duplicate transactions",id:"4-duplicate-transactions",level:2},{value:"5. Python to Loop Partition by Partition",id:"5-python-to-loop-partition-by-partition",level:2}];function h(n){let t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"06-bitcoin-data-verification",children:"06 Bitcoin Data Verification"})}),"\n",(0,s.jsxs)(t.p,{children:["To ",(0,s.jsx)(t.strong,{children:"verify that Bitcoin block and transaction data is complete in ClickHouse"}),", you need to ensure:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"No missing blocks"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"No missing transactions"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"No duplicate block heights"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:"Transaction counts match block metadata"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"1-block-height-continuity",children:"1. block height continuity"}),"\n",(0,s.jsx)(t.p,{children:"Run this to detect missing block numbers:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"WITH seq AS (\n    SELECT number\n    FROM numbers(\n        toUInt64(\n            ifNull((SELECT max(number) FROM blocks_fat), 0) + 1\n        )\n    )\n)\nSELECT seq.number AS missing_block_number\nFROM seq\nLEFT JOIN blocks_fat AS b ON seq.number = b.number\nWHERE b.number != seq.number\n"})}),"\n",(0,s.jsx)(t.p,{children:"If this query returns rows, those block numbers are missing."}),"\n",(0,s.jsx)(t.h2,{id:"2-check-for-duplicate-blocks",children:"2. Check for duplicate blocks"}),"\n",(0,s.jsx)(t.p,{children:"Check for duplicate block numbers (heights):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"SELECT number, count() AS cnt\nFROM blocks_fat\nGROUP BY number\nHAVING cnt > 1\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You should see ",(0,s.jsx)(t.strong,{children:"zero rows"})," returned."]}),"\n",(0,s.jsx)(t.p,{children:"if the count of one block is bigger than 1, please use final command to deduplicate the same rows"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"OPTIMIZE TABLE blocks_fat FINAL;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"3transactions-missing",children:"3.Transactions Missing"}),"\n",(0,s.jsx)(t.p,{children:"To detect missing transactions from the transactions_fat table that are listed in the blocks_fat.transactions array, and process it partition by partition"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"To list all the partition in the blocks_fat table"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"SELECT DISTINCT toYYYYMM(timestamp_month) AS part\nFROM blocks_fat\nORDER BY part ASC\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"2",children:["\n",(0,s.jsx)(t.li,{children:"To find the transactions which are missing from transactions_fat table partition by partition"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"WITH flattened AS (\n    SELECT\n        hash AS block_hash,\n        arrayJoin(transactions) AS tx_hash\n    FROM blocks_fat\n    WHERE toYYYYMM(timestamp_month) = 201304\n)\nSELECT\n    flattened.block_hash,\n    flattened.tx_hash,\n    t.hash\nFROM flattened\nLEFT JOIN (\n    SELECT hash\n    FROM transactions_fat\n    WHERE toYYYYMM(block_timestamp_month) = 201304\n) AS t\nON flattened.tx_hash = t.hash\nWHERE t.hash != flattened.tx_hash;\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"3",children:["\n",(0,s.jsx)(t.li,{children:"If you find there are transactions missed, please double check whether it contained in the bitcoind"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"bitcoin-cli getrawtransaction <txid> true\n"})}),"\n",(0,s.jsx)(t.h2,{id:"3transactions-missing-reverse",children:"3.Transactions Missing Reverse"}),"\n",(0,s.jsx)(t.p,{children:"To find transactions listed in transactions_fat that are not present in blocks_fat.transactions, partition-by-partition (month-by-month)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"WITH\n    transactions_fat_partitioned AS\n    (\n        SELECT\n            hash,\n            block_hash\n        FROM transactions_fat\n        WHERE toYYYYMM(block_timestamp_month) = 201304\n    ),\n    blocks_fat_partitioned AS\n    (\n        SELECT\n            hash AS block_hash,\n            arrayJoin(transactions) AS tx_hash\n        FROM blocks_fat\n        WHERE toYYYYMM(timestamp_month) = 201304\n    )\nSELECT\n    t.hash AS missing_transaction_hash,\n    t.block_hash AS expected_block_hash,\n    b.tx_hash\nFROM transactions_fat_partitioned AS t\nLEFT JOIN blocks_fat_partitioned AS b ON (t.hash = b.tx_hash) AND (t.block_hash = b.block_hash)\nWHERE b.tx_hash != t.hash\n"})}),"\n",(0,s.jsx)(t.h2,{id:"4-duplicate-transactions",children:"4. duplicate transactions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"SELECT hash, count() AS cnt\nFROM transactions_fat\nGROUP BY hash\nHAVING cnt > 1\n"})}),"\n",(0,s.jsx)(t.p,{children:"Again, this should return no rows."}),"\n",(0,s.jsx)(t.h2,{id:"5-python-to-loop-partition-by-partition",children:"5. Python to Loop Partition by Partition"}),"\n",(0,s.jsxs)(t.p,{children:["Here is a ",(0,s.jsx)(t.strong,{children:"Python script"})," that:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Connects to ClickHouse"})," via ",(0,s.jsx)(t.code,{children:"clickhouse-connect"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Iterates over partition months"})," (you define the range)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Runs a query per partition"})," to find transactions listed in ",(0,s.jsx)(t.code,{children:"blocks_fat"})," but ",(0,s.jsx)(t.strong,{children:"missing"})," from ",(0,s.jsx)(t.code,{children:"transactions_fat"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"from clickhouse_connect import get_client\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n# === CONFIGURATION ===\nCLICKHOUSE_HOST = 'localhost'\nCLICKHOUSE_PORT = 8123\nCLICKHOUSE_USER = 'default'\nCLICKHOUSE_PASSWORD = 'password'\nDATABASE = 'bitcoin'\n\nSTART_MONTH = '2010-01'  # yyyy-mm\nEND_MONTH   = '2013-11'\n\n# === INIT CLIENT ===\nclient = get_client(\n    host=CLICKHOUSE_HOST,\n    port=CLICKHOUSE_PORT,\n    username=CLICKHOUSE_USER,\n    password=CLICKHOUSE_PASSWORD,\n    database=DATABASE,\n)\n\n# === GENERATE PARTITIONS ===\ndef generate_partitions(start, end):\n    partitions = []\n    start_date = datetime.strptime(start, '%Y-%m')\n    end_date = datetime.strptime(end, '%Y-%m')\n    current = start_date\n    while current <= end_date:\n        partitions.append(current.strftime('%Y%m'))\n        current += relativedelta(months=1)\n    return partitions\n\n# === MAIN LOOP ===\npartitions = generate_partitions(START_MONTH, END_MONTH)\n\nfor partition in partitions:\n    print(f'\\n\uD83E\uDDEA Querying Partition: {partition}')\n    query = f\"\"\"\n    WITH flattened AS (\n        SELECT\n            hash AS block_hash,\n            tx_hash\n        FROM bitcoin.blocks_fat\n        ARRAY JOIN transactions AS tx_hash\n        WHERE toYYYYMM(timestamp_month) = {partition}\n    )\n    SELECT\n        flattened.block_hash,\n        flattened.tx_hash\n    FROM flattened\n    LEFT JOIN (\n        SELECT hash\n        FROM bitcoin.transactions_fat\n        WHERE toYYYYMM(block_timestamp_month) = {partition}\n    ) AS txs\n    ON flattened.tx_hash = txs.hash\n    WHERE txs.hash != flattened.tx_hash\n    \"\"\"\n    result = client.query(query)\n    rows = result.result_rows\n    if rows:\n        print(f\"\u26A0\uFE0F  Missing transactions in partition {partition}: {len(rows)}\")\n        for row in rows:\n            print(f\"    Block: {row[0]}, Missing TX: {row[1]}\")\n    else:\n        print(f\"\u2705 All transactions found in partition {partition}\")\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"pip install clickhouse-connect python-dateutil\n"})})]})}function d(n={}){let{wrapper:t}={...(0,a.a)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},80980:function(n,t,e){e.d(t,{Z:()=>r,a:()=>o});var i=e(67294);let s={},a=i.createContext(s);function o(n){let t=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(a.Provider,{value:t},n.children)}}}]);